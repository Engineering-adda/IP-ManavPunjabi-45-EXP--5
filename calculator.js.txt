function calculator(num1, num2, operator) {
  return new Promise((resolve, reject) => {
    switch (operator) {
      case '+':
        resolve(num1 + num2);
        break;
      case '-':
        resolve(num1 - num2);
        break;
      case '*':
        resolve(num1 * num2);
        break;
      case '/':
        if (num2 === 0) {
          reject('Error: Division by zero is not allowed.');
        } else {
          resolve(num1 / num2);
        }
        break;
      default:
        reject('Error: Invalid operator. Use +, -, *, or /.');
    }
  });
}

// Example usage:
calculator(10, 5, '+')
  .then(result => console.log('Result:', result))
  .catch(error => console.error('Error:', error));


class SquareIterator {
  constructor(numbers) {
    this.numbers = numbers;
    this.index = 0;
  }

  next() {
    if (this.index < this.numbers.length) {
      const value = this.numbers[this.index] ** 2;
      this.index++;
      return { value, done: false };
    } else {
      return { value: undefined, done: true };
    }
  }

  [Symbol.iterator]() {
    return this;
  }
}

// Example usage:
const numbers = [1, 2, 3, 4, 5];
const squareIterator = new SquareIterator(numbers);

for (const square of squareIterator) {
  console.log(square);  // Outputs: 1, 4, 9, 16, 25
}

function* primeGenerator(limit) {
  function isPrime(num) {
    if (num < 2) return false;
    for (let i = 2; i <= Math.sqrt(num); i++) {
      if (num % i === 0) return false;
    }
    return true;
  }

  for (let i = 2; i <= limit; i++) {
    if (isPrime(i)) {
      yield i;
    }
  }
}

// Example usage:
const primes = primeGenerator(20);
for (const prime of primes) {
  console.log(prime);  // Outputs: 2, 3, 5, 7, 11, 13, 17, 19
}
